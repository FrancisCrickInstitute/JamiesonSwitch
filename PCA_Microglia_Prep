import os
import pandas as pd

# Define the directories containing the files
directories = [
    'DIRECTORY'
]

# Define the files and columns to keep
file_columns = {
    # '_Area.csv': ['ID', 'Area'],
    # '_Sphericity.csv': ['ID', 'Sphericity'],
    # '_Volume.csv': ['ID', 'Volume'],
    '_Filament_Area_(sum).csv': ['ID', 'Filament Area (sum)'],
    '_Filament_Length_(sum).csv': ['ID', 'Filament Length (sum)'],
    '_Filament_No._Segment_Branch_Pts.csv': ['ID', 'Filament No. Segment Branch Pts'],
    '_Filament_No._Segment_Terminal_Pts.csv': ['ID', 'Filament No. Segment Terminal Pts'],
    '_Filament_Volume_(sum).csv': ['ID', 'Filament Volume (sum)'],
    '_Soma_Area.csv': ['FilamentID', 'Soma Area'],
    '_Soma_Sphericity.csv': ['FilamentID', 'Soma Sphericity'],
    '_Soma_Volume.csv': ['FilamentID', 'Soma Volume'],
}

# Initialize an empty dataframe to hold the merged data
merged_df = pd.DataFrame()

# Function to process and merge each file
def process_and_merge(directory, file_pattern, columns):
    global merged_df
    # Find the file matching the pattern
    for file in os.listdir(directory):
        if file.endswith(file_pattern):
            file_path = os.path.join(directory, file)
            try:
                # Read the file, drop the first 3 rows, and keep specified columns
                df = pd.read_csv(file_path, skiprows=3, usecols=columns)
                # Rename 'Filament ID' to 'ID' if it exists
                if 'FilamentID' in df.columns:
                    df.rename(columns={'FilamentID': 'ID'}, inplace=True)
                # Merge with the main dataframe on 'ID'
                if merged_df.empty:
                    merged_df = df
                else:
                    merged_df = pd.merge(merged_df, df, on='ID', how='outer')
            except ValueError as e:
                print(f"Error processing file {file_path}: {e}")
            break

# Process and merge each file in each directory
for directory in directories:
    for file_pattern, columns in file_columns.items():
        process_and_merge(directory, file_pattern, columns)

# Ensure 'ID' is the first column
columns_order = ['ID'] + [col for col in merged_df.columns if col != 'ID']
merged_df = merged_df[columns_order]

# Save the merged dataframe to a new CSV file
output_file = 'FILENAME_cleaned.csv'
merged_df.to_csv(output_file, index=False)

print("Merging complete!")
